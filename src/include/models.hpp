
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.12

#include <stan/model/model_header.hpp>

namespace model_rrfield_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_rrfield : public prob_grad {
private:
    int nKnots;
    int nLocs;
    int nT;
    int N;
    vector<int> stationID;
    vector<int> yearID;
    vector<double> y;
    vector<int> y_int;
    vector<double> prior_gp_scale;
    vector<double> prior_gp_sigma;
    vector<double> prior_sigma;
    vector<double> prior_intercept;
    vector<double> prior_beta;
    matrix_d distKnots;
    matrix_d distKnots21;
    int nCov;
    matrix_d X;
    int sqexp_cov;
    int est_df;
    int est_ar;
    int norm_params;
    int gamma_params;
    int nb2_params;
    int obs_model;
    double fixed_df_value;
    double fixed_ar_value;
    int est_temporalRE;
    int n_year_effects;
public:
    model_rrfield(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_rrfield(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_rrfield_namespace::model_rrfield";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "nKnots", "int", context__.to_vec());
        nKnots = int(0);
        vals_i__ = context__.vals_i("nKnots");
        pos__ = 0;
        nKnots = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nLocs", "int", context__.to_vec());
        nLocs = int(0);
        vals_i__ = context__.vals_i("nLocs");
        pos__ = 0;
        nLocs = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nT", "int", context__.to_vec());
        nT = int(0);
        vals_i__ = context__.vals_i("nT");
        pos__ = 0;
        nT = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "stationID", "int", context__.to_vec(N));
        validate_non_negative_index("stationID", "N", N);
        stationID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("stationID");
        pos__ = 0;
        size_t stationID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < stationID_limit_0__; ++i_0__) {
            stationID[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "yearID", "int", context__.to_vec(N));
        validate_non_negative_index("yearID", "N", N);
        yearID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("yearID");
        pos__ = 0;
        size_t yearID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < yearID_limit_0__; ++i_0__) {
            yearID[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "y_int", "int", context__.to_vec(N));
        validate_non_negative_index("y_int", "N", N);
        y_int = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y_int");
        pos__ = 0;
        size_t y_int_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_int_limit_0__; ++i_0__) {
            y_int[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_gp_scale", "double", context__.to_vec(3));
        validate_non_negative_index("prior_gp_scale", "3", 3);
        prior_gp_scale = std::vector<double>(3,double(0));
        vals_r__ = context__.vals_r("prior_gp_scale");
        pos__ = 0;
        size_t prior_gp_scale_limit_0__ = 3;
        for (size_t i_0__ = 0; i_0__ < prior_gp_scale_limit_0__; ++i_0__) {
            prior_gp_scale[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_gp_sigma", "double", context__.to_vec(3));
        validate_non_negative_index("prior_gp_sigma", "3", 3);
        prior_gp_sigma = std::vector<double>(3,double(0));
        vals_r__ = context__.vals_r("prior_gp_sigma");
        pos__ = 0;
        size_t prior_gp_sigma_limit_0__ = 3;
        for (size_t i_0__ = 0; i_0__ < prior_gp_sigma_limit_0__; ++i_0__) {
            prior_gp_sigma[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_sigma", "double", context__.to_vec(3));
        validate_non_negative_index("prior_sigma", "3", 3);
        prior_sigma = std::vector<double>(3,double(0));
        vals_r__ = context__.vals_r("prior_sigma");
        pos__ = 0;
        size_t prior_sigma_limit_0__ = 3;
        for (size_t i_0__ = 0; i_0__ < prior_sigma_limit_0__; ++i_0__) {
            prior_sigma[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_intercept", "double", context__.to_vec(3));
        validate_non_negative_index("prior_intercept", "3", 3);
        prior_intercept = std::vector<double>(3,double(0));
        vals_r__ = context__.vals_r("prior_intercept");
        pos__ = 0;
        size_t prior_intercept_limit_0__ = 3;
        for (size_t i_0__ = 0; i_0__ < prior_intercept_limit_0__; ++i_0__) {
            prior_intercept[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "prior_beta", "double", context__.to_vec(3));
        validate_non_negative_index("prior_beta", "3", 3);
        prior_beta = std::vector<double>(3,double(0));
        vals_r__ = context__.vals_r("prior_beta");
        pos__ = 0;
        size_t prior_beta_limit_0__ = 3;
        for (size_t i_0__ = 0; i_0__ < prior_beta_limit_0__; ++i_0__) {
            prior_beta[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "distKnots", "matrix_d", context__.to_vec(nKnots,nKnots));
        validate_non_negative_index("distKnots", "nKnots", nKnots);
        validate_non_negative_index("distKnots", "nKnots", nKnots);
        distKnots = matrix_d(static_cast<Eigen::VectorXd::Index>(nKnots),static_cast<Eigen::VectorXd::Index>(nKnots));
        vals_r__ = context__.vals_r("distKnots");
        pos__ = 0;
        size_t distKnots_m_mat_lim__ = nKnots;
        size_t distKnots_n_mat_lim__ = nKnots;
        for (size_t n_mat__ = 0; n_mat__ < distKnots_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < distKnots_m_mat_lim__; ++m_mat__) {
                distKnots(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "distKnots21", "matrix_d", context__.to_vec(nLocs,nKnots));
        validate_non_negative_index("distKnots21", "nLocs", nLocs);
        validate_non_negative_index("distKnots21", "nKnots", nKnots);
        distKnots21 = matrix_d(static_cast<Eigen::VectorXd::Index>(nLocs),static_cast<Eigen::VectorXd::Index>(nKnots));
        vals_r__ = context__.vals_r("distKnots21");
        pos__ = 0;
        size_t distKnots21_m_mat_lim__ = nLocs;
        size_t distKnots21_n_mat_lim__ = nKnots;
        for (size_t n_mat__ = 0; n_mat__ < distKnots21_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < distKnots21_m_mat_lim__; ++m_mat__) {
                distKnots21(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "nCov", "int", context__.to_vec());
        nCov = int(0);
        vals_i__ = context__.vals_i("nCov");
        pos__ = 0;
        nCov = vals_i__[pos__++];
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,nCov));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "nCov", nCov);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(nCov));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = nCov;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "sqexp_cov", "int", context__.to_vec());
        sqexp_cov = int(0);
        vals_i__ = context__.vals_i("sqexp_cov");
        pos__ = 0;
        sqexp_cov = vals_i__[pos__++];
        context__.validate_dims("data initialization", "est_df", "int", context__.to_vec());
        est_df = int(0);
        vals_i__ = context__.vals_i("est_df");
        pos__ = 0;
        est_df = vals_i__[pos__++];
        context__.validate_dims("data initialization", "est_ar", "int", context__.to_vec());
        est_ar = int(0);
        vals_i__ = context__.vals_i("est_ar");
        pos__ = 0;
        est_ar = vals_i__[pos__++];
        context__.validate_dims("data initialization", "norm_params", "int", context__.to_vec());
        norm_params = int(0);
        vals_i__ = context__.vals_i("norm_params");
        pos__ = 0;
        norm_params = vals_i__[pos__++];
        context__.validate_dims("data initialization", "gamma_params", "int", context__.to_vec());
        gamma_params = int(0);
        vals_i__ = context__.vals_i("gamma_params");
        pos__ = 0;
        gamma_params = vals_i__[pos__++];
        context__.validate_dims("data initialization", "nb2_params", "int", context__.to_vec());
        nb2_params = int(0);
        vals_i__ = context__.vals_i("nb2_params");
        pos__ = 0;
        nb2_params = vals_i__[pos__++];
        context__.validate_dims("data initialization", "obs_model", "int", context__.to_vec());
        obs_model = int(0);
        vals_i__ = context__.vals_i("obs_model");
        pos__ = 0;
        obs_model = vals_i__[pos__++];
        context__.validate_dims("data initialization", "fixed_df_value", "double", context__.to_vec());
        fixed_df_value = double(0);
        vals_r__ = context__.vals_r("fixed_df_value");
        pos__ = 0;
        fixed_df_value = vals_r__[pos__++];
        context__.validate_dims("data initialization", "fixed_ar_value", "double", context__.to_vec());
        fixed_ar_value = double(0);
        vals_r__ = context__.vals_r("fixed_ar_value");
        pos__ = 0;
        fixed_ar_value = vals_r__[pos__++];
        context__.validate_dims("data initialization", "est_temporalRE", "int", context__.to_vec());
        est_temporalRE = int(0);
        vals_i__ = context__.vals_i("est_temporalRE");
        pos__ = 0;
        est_temporalRE = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_year_effects", "int", context__.to_vec());
        n_year_effects = int(0);
        vals_i__ = context__.vals_i("n_year_effects");
        pos__ = 0;
        n_year_effects = vals_i__[pos__++];

        // validate data
        check_greater_or_equal(function__,"nKnots",nKnots,1);
        check_greater_or_equal(function__,"nLocs",nLocs,1);
        check_greater_or_equal(function__,"nT",nT,1);
        check_greater_or_equal(function__,"N",N,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"stationID[k0__]",stationID[k0__],1);
        }
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"yearID[k0__]",yearID[k0__],1);
        }
        check_greater_or_equal(function__,"nCov",nCov,0);
        check_greater_or_equal(function__,"sqexp_cov",sqexp_cov,0);
        check_less_or_equal(function__,"sqexp_cov",sqexp_cov,1);
        check_greater_or_equal(function__,"est_df",est_df,0);
        check_less_or_equal(function__,"est_df",est_df,1);
        check_greater_or_equal(function__,"est_ar",est_ar,0);
        check_less_or_equal(function__,"est_ar",est_ar,1);
        check_greater_or_equal(function__,"norm_params",norm_params,0);
        check_less_or_equal(function__,"norm_params",norm_params,1);
        check_greater_or_equal(function__,"gamma_params",gamma_params,0);
        check_less_or_equal(function__,"gamma_params",gamma_params,1);
        check_greater_or_equal(function__,"nb2_params",nb2_params,0);
        check_less_or_equal(function__,"nb2_params",nb2_params,1);
        check_greater_or_equal(function__,"obs_model",obs_model,0);
        check_less_or_equal(function__,"obs_model",obs_model,2);
        check_greater_or_equal(function__,"fixed_df_value",fixed_df_value,2);
        check_greater_or_equal(function__,"est_temporalRE",est_temporalRE,0);
        check_less_or_equal(function__,"est_temporalRE",est_temporalRE,1);
        check_greater_or_equal(function__,"n_year_effects",n_year_effects,0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += est_df;
        num_params_r__ += norm_params;
        num_params_r__ += gamma_params;
        num_params_r__ += nb2_params;
        num_params_r__ += n_year_effects;
        num_params_r__ += est_temporalRE;
        num_params_r__ += nKnots * nT;
        num_params_r__ += nCov;
        num_params_r__ += est_ar;
    }

    ~model_rrfield() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("gp_scale")))
            throw std::runtime_error("variable gp_scale missing");
        vals_r__ = context__.vals_r("gp_scale");
        pos__ = 0U;
        context__.validate_dims("initialization", "gp_scale", "double", context__.to_vec());
        double gp_scale(0);
        gp_scale = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,gp_scale);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gp_scale: ") + e.what());
        }

        if (!(context__.contains_r("gp_sigma")))
            throw std::runtime_error("variable gp_sigma missing");
        vals_r__ = context__.vals_r("gp_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gp_sigma", "double", context__.to_vec());
        double gp_sigma(0);
        gp_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,gp_sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gp_sigma: ") + e.what());
        }

        if (!(context__.contains_r("df")))
            throw std::runtime_error("variable df missing");
        vals_r__ = context__.vals_r("df");
        pos__ = 0U;
        context__.validate_dims("initialization", "df", "double", context__.to_vec(est_df));
        std::vector<double> df(est_df,double(0));
        for (int i0__ = 0U; i0__ < est_df; ++i0__)
            df[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < est_df; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(2,df[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable df: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec(norm_params));
        std::vector<double> sigma(norm_params,double(0));
        for (int i0__ = 0U; i0__ < norm_params; ++i0__)
            sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < norm_params; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("CV")))
            throw std::runtime_error("variable CV missing");
        vals_r__ = context__.vals_r("CV");
        pos__ = 0U;
        context__.validate_dims("initialization", "CV", "double", context__.to_vec(gamma_params));
        std::vector<double> CV(gamma_params,double(0));
        for (int i0__ = 0U; i0__ < gamma_params; ++i0__)
            CV[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < gamma_params; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,CV[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable CV: ") + e.what());
        }

        if (!(context__.contains_r("nb2_phi")))
            throw std::runtime_error("variable nb2_phi missing");
        vals_r__ = context__.vals_r("nb2_phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "nb2_phi", "double", context__.to_vec(nb2_params));
        std::vector<double> nb2_phi(nb2_params,double(0));
        for (int i0__ = 0U; i0__ < nb2_params; ++i0__)
            nb2_phi[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < nb2_params; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,nb2_phi[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nb2_phi: ") + e.what());
        }

        if (!(context__.contains_r("yearEffects")))
            throw std::runtime_error("variable yearEffects missing");
        vals_r__ = context__.vals_r("yearEffects");
        pos__ = 0U;
        context__.validate_dims("initialization", "yearEffects", "double", context__.to_vec(n_year_effects));
        std::vector<double> yearEffects(n_year_effects,double(0));
        for (int i0__ = 0U; i0__ < n_year_effects; ++i0__)
            yearEffects[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_year_effects; ++i0__)
            try {
            writer__.scalar_unconstrain(yearEffects[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable yearEffects: ") + e.what());
        }

        if (!(context__.contains_r("year_sigma")))
            throw std::runtime_error("variable year_sigma missing");
        vals_r__ = context__.vals_r("year_sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "year_sigma", "double", context__.to_vec(est_temporalRE));
        std::vector<double> year_sigma(est_temporalRE,double(0));
        for (int i0__ = 0U; i0__ < est_temporalRE; ++i0__)
            year_sigma[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < est_temporalRE; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,year_sigma[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable year_sigma: ") + e.what());
        }

        if (!(context__.contains_r("spatialEffectsKnots")))
            throw std::runtime_error("variable spatialEffectsKnots missing");
        vals_r__ = context__.vals_r("spatialEffectsKnots");
        pos__ = 0U;
        context__.validate_dims("initialization", "spatialEffectsKnots", "vector_d", context__.to_vec(nT,nKnots));
        std::vector<vector_d> spatialEffectsKnots(nT,vector_d(static_cast<Eigen::VectorXd::Index>(nKnots)));
        for (int j1__ = 0U; j1__ < nKnots; ++j1__)
            for (int i0__ = 0U; i0__ < nT; ++i0__)
                spatialEffectsKnots[i0__](j1__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < nT; ++i0__)
            try {
            writer__.vector_unconstrain(spatialEffectsKnots[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable spatialEffectsKnots: ") + e.what());
        }

        if (!(context__.contains_r("B")))
            throw std::runtime_error("variable B missing");
        vals_r__ = context__.vals_r("B");
        pos__ = 0U;
        context__.validate_dims("initialization", "B", "vector_d", context__.to_vec(nCov));
        vector_d B(static_cast<Eigen::VectorXd::Index>(nCov));
        for (int j1__ = 0U; j1__ < nCov; ++j1__)
            B(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(B);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable B: ") + e.what());
        }

        if (!(context__.contains_r("ar")))
            throw std::runtime_error("variable ar missing");
        vals_r__ = context__.vals_r("ar");
        pos__ = 0U;
        context__.validate_dims("initialization", "ar", "double", context__.to_vec(est_ar));
        std::vector<double> ar(est_ar,double(0));
        for (int i0__ = 0U; i0__ < est_ar; ++i0__)
            ar[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < est_ar; ++i0__)
            try {
            writer__.scalar_unconstrain(ar[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ar: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ gp_scale;
        (void) gp_scale;  // dummy to suppress unused var warning
        if (jacobian__)
            gp_scale = in__.scalar_lb_constrain(0,lp__);
        else
            gp_scale = in__.scalar_lb_constrain(0);

        T__ gp_sigma;
        (void) gp_sigma;  // dummy to suppress unused var warning
        if (jacobian__)
            gp_sigma = in__.scalar_lb_constrain(0,lp__);
        else
            gp_sigma = in__.scalar_lb_constrain(0);

        vector<T__> df;
        size_t dim_df_0__ = est_df;
        df.reserve(dim_df_0__);
        for (size_t k_0__ = 0; k_0__ < dim_df_0__; ++k_0__) {
            if (jacobian__)
                df.push_back(in__.scalar_lb_constrain(2,lp__));
            else
                df.push_back(in__.scalar_lb_constrain(2));
        }

        vector<T__> sigma;
        size_t dim_sigma_0__ = norm_params;
        sigma.reserve(dim_sigma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            if (jacobian__)
                sigma.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                sigma.push_back(in__.scalar_lb_constrain(0));
        }

        vector<T__> CV;
        size_t dim_CV_0__ = gamma_params;
        CV.reserve(dim_CV_0__);
        for (size_t k_0__ = 0; k_0__ < dim_CV_0__; ++k_0__) {
            if (jacobian__)
                CV.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                CV.push_back(in__.scalar_lb_constrain(0));
        }

        vector<T__> nb2_phi;
        size_t dim_nb2_phi_0__ = nb2_params;
        nb2_phi.reserve(dim_nb2_phi_0__);
        for (size_t k_0__ = 0; k_0__ < dim_nb2_phi_0__; ++k_0__) {
            if (jacobian__)
                nb2_phi.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                nb2_phi.push_back(in__.scalar_lb_constrain(0));
        }

        vector<T__> yearEffects;
        size_t dim_yearEffects_0__ = n_year_effects;
        yearEffects.reserve(dim_yearEffects_0__);
        for (size_t k_0__ = 0; k_0__ < dim_yearEffects_0__; ++k_0__) {
            if (jacobian__)
                yearEffects.push_back(in__.scalar_constrain(lp__));
            else
                yearEffects.push_back(in__.scalar_constrain());
        }

        vector<T__> year_sigma;
        size_t dim_year_sigma_0__ = est_temporalRE;
        year_sigma.reserve(dim_year_sigma_0__);
        for (size_t k_0__ = 0; k_0__ < dim_year_sigma_0__; ++k_0__) {
            if (jacobian__)
                year_sigma.push_back(in__.scalar_lb_constrain(0,lp__));
            else
                year_sigma.push_back(in__.scalar_lb_constrain(0));
        }

        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > spatialEffectsKnots;
        size_t dim_spatialEffectsKnots_0__ = nT;
        spatialEffectsKnots.reserve(dim_spatialEffectsKnots_0__);
        for (size_t k_0__ = 0; k_0__ < dim_spatialEffectsKnots_0__; ++k_0__) {
            if (jacobian__)
                spatialEffectsKnots.push_back(in__.vector_constrain(nKnots,lp__));
            else
                spatialEffectsKnots.push_back(in__.vector_constrain(nKnots));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  B;
        (void) B;  // dummy to suppress unused var warning
        if (jacobian__)
            B = in__.vector_constrain(nCov,lp__);
        else
            B = in__.vector_constrain(nCov);

        vector<T__> ar;
        size_t dim_ar_0__ = est_ar;
        ar.reserve(dim_ar_0__);
        for (size_t k_0__ = 0; k_0__ < dim_ar_0__; ++k_0__) {
            if (jacobian__)
                ar.push_back(in__.scalar_constrain(lp__));
            else
                ar.push_back(in__.scalar_constrain());
        }


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  muZeros(static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) muZeros;  // dummy to suppress unused var warning
        vector<Eigen::Matrix<T__,Eigen::Dynamic,1> > spatialEffects(nT, (Eigen::Matrix<T__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(nLocs))));
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  SigmaKnots(static_cast<Eigen::VectorXd::Index>(nKnots),static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) SigmaKnots;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  SigmaOffDiag(static_cast<Eigen::VectorXd::Index>(nLocs),static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) SigmaOffDiag;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  invSigmaKnots(static_cast<Eigen::VectorXd::Index>(nLocs),static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) invSigmaKnots;  // dummy to suppress unused var warning
        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_hat(static_cast<Eigen::VectorXd::Index>(N));
        (void) y_hat;  // dummy to suppress unused var warning
        vector<T__> gammaA(gamma_params);
        T__ gp_sigma_sq;
        (void) gp_sigma_sq;  // dummy to suppress unused var warning

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(muZeros,DUMMY_VAR__);
        stan::math::fill(spatialEffects,DUMMY_VAR__);
        stan::math::fill(SigmaKnots,DUMMY_VAR__);
        stan::math::fill(SigmaOffDiag,DUMMY_VAR__);
        stan::math::fill(invSigmaKnots,DUMMY_VAR__);
        stan::math::fill(y_hat,DUMMY_VAR__);
        stan::math::fill(gammaA,DUMMY_VAR__);
        stan::math::fill(gp_sigma_sq,DUMMY_VAR__);

        try {
            stan::math::assign(gp_sigma_sq, pow(gp_sigma,2.0));
            if (as_bool(logical_eq(sqexp_cov,1))) {
                stan::math::assign(SigmaKnots, multiply(gp_sigma_sq,exp(multiply(-(inv((2.0 * pow(gp_scale,2.0)))),distKnots))));
                stan::math::assign(SigmaOffDiag, multiply(gp_sigma_sq,exp(multiply(-(inv((2.0 * pow(gp_scale,2.0)))),distKnots21))));
            } else {
                stan::math::assign(SigmaKnots, multiply(gp_sigma_sq,exp(divide(minus(distKnots),gp_scale))));
                stan::math::assign(SigmaOffDiag, multiply(gp_sigma_sq,exp(divide(minus(distKnots21),gp_scale))));
            }
            for (int k = 1; k <= nKnots; ++k) {
                stan::math::assign(get_base1_lhs(muZeros,k,"muZeros",1), 0);
            }
            stan::math::assign(SigmaOffDiag, multiply(SigmaOffDiag,inverse_spd(SigmaKnots)));
            for (int t = 1; t <= nT; ++t) {
                stan::math::assign(get_base1_lhs(spatialEffects,t,"spatialEffects",1), multiply(SigmaOffDiag,get_base1(spatialEffectsKnots,t,"spatialEffectsKnots",1)));
            }
            for (int i = 1; i <= N; ++i) {
                if (as_bool(logical_eq(est_temporalRE,0))) {
                    stan::math::assign(get_base1_lhs(y_hat,i,"y_hat",1), (multiply(get_base1(X,i,"X",1),B) + get_base1(get_base1(spatialEffects,get_base1(yearID,i,"yearID",1),"spatialEffects",1),get_base1(stationID,i,"stationID",1),"spatialEffects",2)));
                } else {
                    stan::math::assign(get_base1_lhs(y_hat,i,"y_hat",1), (get_base1(get_base1(spatialEffects,get_base1(yearID,i,"yearID",1),"spatialEffects",1),get_base1(stationID,i,"stationID",1),"spatialEffects",2) + get_base1(yearEffects,get_base1(yearID,i,"yearID",1),"yearEffects",1)));
                }
            }
            if (as_bool(logical_eq(obs_model,0))) {
                stan::math::assign(get_base1_lhs(gammaA,1,"gammaA",1), (1 / (get_base1(CV,1,"CV",1) * get_base1(CV,1,"CV",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < nKnots; ++i0__) {
            if (stan::math::is_uninitialized(muZeros(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: muZeros" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < nT; ++i0__) {
            for (int i1__ = 0; i1__ < nLocs; ++i1__) {
                if (stan::math::is_uninitialized(spatialEffects[i0__](i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: spatialEffects" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < nKnots; ++i0__) {
            for (int i1__ = 0; i1__ < nKnots; ++i1__) {
                if (stan::math::is_uninitialized(SigmaKnots(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: SigmaKnots" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < nLocs; ++i0__) {
            for (int i1__ = 0; i1__ < nKnots; ++i1__) {
                if (stan::math::is_uninitialized(SigmaOffDiag(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: SigmaOffDiag" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < nLocs; ++i0__) {
            for (int i1__ = 0; i1__ < nKnots; ++i1__) {
                if (stan::math::is_uninitialized(invSigmaKnots(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: invSigmaKnots" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(y_hat(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: y_hat" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < gamma_params; ++i0__) {
            if (stan::math::is_uninitialized(gammaA[i0__])) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: gammaA" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        if (stan::math::is_uninitialized(gp_sigma_sq)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: gp_sigma_sq";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        for (int k0__ = 0; k0__ < gamma_params; ++k0__) {
            check_greater_or_equal(function__,"gammaA[k0__]",gammaA[k0__],0);
        }
        check_greater_or_equal(function__,"gp_sigma_sq",gp_sigma_sq,0);

        // model body
        try {
            lp_accum__.add(student_t_log<propto__>(gp_scale, get_base1(prior_gp_scale,1,"prior_gp_scale",1), get_base1(prior_gp_scale,2,"prior_gp_scale",1), get_base1(prior_gp_scale,3,"prior_gp_scale",1)));
            lp_accum__.add(student_t_log<propto__>(gp_sigma, get_base1(prior_gp_sigma,1,"prior_gp_sigma",1), get_base1(prior_gp_sigma,2,"prior_gp_sigma",1), get_base1(prior_gp_sigma,3,"prior_gp_sigma",1)));
            if (as_bool(logical_eq(est_ar,1))) {
                lp_accum__.add(normal_log<propto__>(ar, 0, 1));
            }
            if (as_bool(logical_gte(nCov,1))) {
                lp_accum__.add(student_t_log<propto__>(get_base1(B,1,"B",1), get_base1(prior_intercept,1,"prior_intercept",1), get_base1(prior_intercept,2,"prior_intercept",1), get_base1(prior_intercept,3,"prior_intercept",1)));
            }
            if (as_bool(logical_gte(nCov,2))) {
                for (int i = 2; i <= nCov; ++i) {
                    lp_accum__.add(student_t_log<propto__>(get_base1(B,i,"B",1), get_base1(prior_beta,1,"prior_beta",1), get_base1(prior_beta,2,"prior_beta",1), get_base1(prior_beta,3,"prior_beta",1)));
                }
            }
            if (as_bool(logical_eq(est_temporalRE,1))) {
                lp_accum__.add(student_t_log<propto__>(year_sigma, 3, 0, 2.5));
                lp_accum__.add(normal_log<propto__>(get_base1(yearEffects,1,"yearEffects",1), 0, 200));
                for (int t = 2; t <= nT; ++t) {
                    lp_accum__.add(normal_log<propto__>(get_base1(yearEffects,t,"yearEffects",1), get_base1(yearEffects,(t - 1),"yearEffects",1), year_sigma));
                }
            }
            if (as_bool(logical_eq(est_df,1))) {
                lp_accum__.add(gamma_log<propto__>(df, 2, 0.10000000000000001));
                lp_accum__.add(multi_student_t_log<propto__>(get_base1(spatialEffectsKnots,1,"spatialEffectsKnots",1), get_base1(df,1,"df",1), muZeros, SigmaKnots));
                for (int t = 2; t <= nT; ++t) {
                    if (as_bool(logical_eq(est_ar,1))) {
                        lp_accum__.add(multi_student_t_log<propto__>(get_base1(spatialEffectsKnots,t,"spatialEffectsKnots",1), get_base1(df,1,"df",1), multiply(get_base1(ar,1,"ar",1),get_base1(spatialEffectsKnots,(t - 1),"spatialEffectsKnots",1)), SigmaKnots));
                    } else {
                        lp_accum__.add(multi_student_t_log<propto__>(get_base1(spatialEffectsKnots,t,"spatialEffectsKnots",1), get_base1(df,1,"df",1), multiply(fixed_ar_value,get_base1(spatialEffectsKnots,(t - 1),"spatialEffectsKnots",1)), SigmaKnots));
                    }
                }
            } else {
                lp_accum__.add(multi_student_t_log<propto__>(get_base1(spatialEffectsKnots,1,"spatialEffectsKnots",1), fixed_df_value, muZeros, SigmaKnots));
                for (int t = 2; t <= nT; ++t) {
                    if (as_bool(logical_eq(est_ar,1))) {
                        lp_accum__.add(multi_student_t_log<propto__>(get_base1(spatialEffectsKnots,t,"spatialEffectsKnots",1), fixed_df_value, multiply(get_base1(ar,1,"ar",1),get_base1(spatialEffectsKnots,(t - 1),"spatialEffectsKnots",1)), SigmaKnots));
                    } else {
                        lp_accum__.add(multi_student_t_log<propto__>(get_base1(spatialEffectsKnots,t,"spatialEffectsKnots",1), fixed_df_value, multiply(fixed_ar_value,get_base1(spatialEffectsKnots,(t - 1),"spatialEffectsKnots",1)), SigmaKnots));
                    }
                }
            }
            if (as_bool(logical_eq(obs_model,2))) {
                lp_accum__.add(student_t_log<propto__>(get_base1(nb2_phi,1,"nb2_phi",1), get_base1(prior_sigma,1,"prior_sigma",1), get_base1(prior_sigma,2,"prior_sigma",1), get_base1(prior_sigma,3,"prior_sigma",1)));
                lp_accum__.add(neg_binomial_2_log_log<propto__>(y_int, y_hat, get_base1(nb2_phi,1,"nb2_phi",1)));
            }
            if (as_bool(logical_eq(obs_model,1))) {
                lp_accum__.add(student_t_log<propto__>(get_base1(sigma,1,"sigma",1), get_base1(prior_sigma,1,"prior_sigma",1), get_base1(prior_sigma,2,"prior_sigma",1), get_base1(prior_sigma,3,"prior_sigma",1)));
                lp_accum__.add(normal_log<propto__>(y, y_hat, get_base1(sigma,1,"sigma",1)));
            }
            if (as_bool(logical_eq(obs_model,0))) {
                lp_accum__.add(student_t_log<propto__>(get_base1(CV,1,"CV",1), get_base1(prior_sigma,1,"prior_sigma",1), get_base1(prior_sigma,2,"prior_sigma",1), get_base1(prior_sigma,3,"prior_sigma",1)));
                lp_accum__.add(gamma_log<propto__>(y, get_base1(gammaA,1,"gammaA",1), elt_divide(get_base1(gammaA,1,"gammaA",1),exp(y_hat))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gp_scale");
        names__.push_back("gp_sigma");
        names__.push_back("df");
        names__.push_back("sigma");
        names__.push_back("CV");
        names__.push_back("nb2_phi");
        names__.push_back("yearEffects");
        names__.push_back("year_sigma");
        names__.push_back("spatialEffectsKnots");
        names__.push_back("B");
        names__.push_back("ar");
        names__.push_back("muZeros");
        names__.push_back("spatialEffects");
        names__.push_back("SigmaKnots");
        names__.push_back("SigmaOffDiag");
        names__.push_back("invSigmaKnots");
        names__.push_back("y_hat");
        names__.push_back("gammaA");
        names__.push_back("gp_sigma_sq");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_df);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(norm_params);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gamma_params);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nb2_params);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_year_effects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_temporalRE);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nT);
        dims__.push_back(nKnots);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nCov);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_ar);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nKnots);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nT);
        dims__.push_back(nLocs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nKnots);
        dims__.push_back(nKnots);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nLocs);
        dims__.push_back(nKnots);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nLocs);
        dims__.push_back(nKnots);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(gamma_params);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_rrfield_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double gp_scale = in__.scalar_lb_constrain(0);
        double gp_sigma = in__.scalar_lb_constrain(0);
        vector<double> df;
        size_t dim_df_0__ = est_df;
        for (size_t k_0__ = 0; k_0__ < dim_df_0__; ++k_0__) {
            df.push_back(in__.scalar_lb_constrain(2));
        }
        vector<double> sigma;
        size_t dim_sigma_0__ = norm_params;
        for (size_t k_0__ = 0; k_0__ < dim_sigma_0__; ++k_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> CV;
        size_t dim_CV_0__ = gamma_params;
        for (size_t k_0__ = 0; k_0__ < dim_CV_0__; ++k_0__) {
            CV.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> nb2_phi;
        size_t dim_nb2_phi_0__ = nb2_params;
        for (size_t k_0__ = 0; k_0__ < dim_nb2_phi_0__; ++k_0__) {
            nb2_phi.push_back(in__.scalar_lb_constrain(0));
        }
        vector<double> yearEffects;
        size_t dim_yearEffects_0__ = n_year_effects;
        for (size_t k_0__ = 0; k_0__ < dim_yearEffects_0__; ++k_0__) {
            yearEffects.push_back(in__.scalar_constrain());
        }
        vector<double> year_sigma;
        size_t dim_year_sigma_0__ = est_temporalRE;
        for (size_t k_0__ = 0; k_0__ < dim_year_sigma_0__; ++k_0__) {
            year_sigma.push_back(in__.scalar_lb_constrain(0));
        }
        vector<vector_d> spatialEffectsKnots;
        size_t dim_spatialEffectsKnots_0__ = nT;
        for (size_t k_0__ = 0; k_0__ < dim_spatialEffectsKnots_0__; ++k_0__) {
            spatialEffectsKnots.push_back(in__.vector_constrain(nKnots));
        }
        vector_d B = in__.vector_constrain(nCov);
        vector<double> ar;
        size_t dim_ar_0__ = est_ar;
        for (size_t k_0__ = 0; k_0__ < dim_ar_0__; ++k_0__) {
            ar.push_back(in__.scalar_constrain());
        }
        vars__.push_back(gp_scale);
        vars__.push_back(gp_sigma);
        for (int k_0__ = 0; k_0__ < est_df; ++k_0__) {
            vars__.push_back(df[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < norm_params; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < gamma_params; ++k_0__) {
            vars__.push_back(CV[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < nb2_params; ++k_0__) {
            vars__.push_back(nb2_phi[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_year_effects; ++k_0__) {
            vars__.push_back(yearEffects[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < est_temporalRE; ++k_0__) {
            vars__.push_back(year_sigma[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < nKnots; ++k_1__) {
            for (int k_0__ = 0; k_0__ < nT; ++k_0__) {
                vars__.push_back(spatialEffectsKnots[k_0__][k_1__]);
            }
        }
        for (int k_0__ = 0; k_0__ < nCov; ++k_0__) {
            vars__.push_back(B[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < est_ar; ++k_0__) {
            vars__.push_back(ar[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d muZeros(static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) muZeros;  // dummy to suppress unused var warning
        vector<vector_d> spatialEffects(nT, (vector_d(static_cast<Eigen::VectorXd::Index>(nLocs))));
        matrix_d SigmaKnots(static_cast<Eigen::VectorXd::Index>(nKnots),static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) SigmaKnots;  // dummy to suppress unused var warning
        matrix_d SigmaOffDiag(static_cast<Eigen::VectorXd::Index>(nLocs),static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) SigmaOffDiag;  // dummy to suppress unused var warning
        matrix_d invSigmaKnots(static_cast<Eigen::VectorXd::Index>(nLocs),static_cast<Eigen::VectorXd::Index>(nKnots));
        (void) invSigmaKnots;  // dummy to suppress unused var warning
        vector_d y_hat(static_cast<Eigen::VectorXd::Index>(N));
        (void) y_hat;  // dummy to suppress unused var warning
        vector<double> gammaA(gamma_params, 0.0);
        double gp_sigma_sq(0.0);
        (void) gp_sigma_sq;  // dummy to suppress unused var warning

        try {
            stan::math::assign(gp_sigma_sq, pow(gp_sigma,2.0));
            if (as_bool(logical_eq(sqexp_cov,1))) {
                stan::math::assign(SigmaKnots, multiply(gp_sigma_sq,exp(multiply(-(inv((2.0 * pow(gp_scale,2.0)))),distKnots))));
                stan::math::assign(SigmaOffDiag, multiply(gp_sigma_sq,exp(multiply(-(inv((2.0 * pow(gp_scale,2.0)))),distKnots21))));
            } else {
                stan::math::assign(SigmaKnots, multiply(gp_sigma_sq,exp(divide(minus(distKnots),gp_scale))));
                stan::math::assign(SigmaOffDiag, multiply(gp_sigma_sq,exp(divide(minus(distKnots21),gp_scale))));
            }
            for (int k = 1; k <= nKnots; ++k) {
                stan::math::assign(get_base1_lhs(muZeros,k,"muZeros",1), 0);
            }
            stan::math::assign(SigmaOffDiag, multiply(SigmaOffDiag,inverse_spd(SigmaKnots)));
            for (int t = 1; t <= nT; ++t) {
                stan::math::assign(get_base1_lhs(spatialEffects,t,"spatialEffects",1), multiply(SigmaOffDiag,get_base1(spatialEffectsKnots,t,"spatialEffectsKnots",1)));
            }
            for (int i = 1; i <= N; ++i) {
                if (as_bool(logical_eq(est_temporalRE,0))) {
                    stan::math::assign(get_base1_lhs(y_hat,i,"y_hat",1), (multiply(get_base1(X,i,"X",1),B) + get_base1(get_base1(spatialEffects,get_base1(yearID,i,"yearID",1),"spatialEffects",1),get_base1(stationID,i,"stationID",1),"spatialEffects",2)));
                } else {
                    stan::math::assign(get_base1_lhs(y_hat,i,"y_hat",1), (get_base1(get_base1(spatialEffects,get_base1(yearID,i,"yearID",1),"spatialEffects",1),get_base1(stationID,i,"stationID",1),"spatialEffects",2) + get_base1(yearEffects,get_base1(yearID,i,"yearID",1),"yearEffects",1)));
                }
            }
            if (as_bool(logical_eq(obs_model,0))) {
                stan::math::assign(get_base1_lhs(gammaA,1,"gammaA",1), (1 / (get_base1(CV,1,"CV",1) * get_base1(CV,1,"CV",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int k0__ = 0; k0__ < gamma_params; ++k0__) {
            check_greater_or_equal(function__,"gammaA[k0__]",gammaA[k0__],0);
        }
        check_greater_or_equal(function__,"gp_sigma_sq",gp_sigma_sq,0);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < nKnots; ++k_0__) {
            vars__.push_back(muZeros[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < nLocs; ++k_1__) {
            for (int k_0__ = 0; k_0__ < nT; ++k_0__) {
                vars__.push_back(spatialEffects[k_0__][k_1__]);
            }
        }
        for (int k_1__ = 0; k_1__ < nKnots; ++k_1__) {
            for (int k_0__ = 0; k_0__ < nKnots; ++k_0__) {
                vars__.push_back(SigmaKnots(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < nKnots; ++k_1__) {
            for (int k_0__ = 0; k_0__ < nLocs; ++k_0__) {
                vars__.push_back(SigmaOffDiag(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < nKnots; ++k_1__) {
            for (int k_0__ = 0; k_0__ < nLocs; ++k_0__) {
                vars__.push_back(invSigmaKnots(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(y_hat[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < gamma_params; ++k_0__) {
            vars__.push_back(gammaA[k_0__]);
        }
        vars__.push_back(gp_sigma_sq);

        if (!include_gqs__) return;
        // declare and define generated quantities

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_rrfield";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp_scale";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp_sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= est_df; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "df" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= norm_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= gamma_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CV" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nb2_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nb2_phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_year_effects; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yearEffects" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= est_temporalRE; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "year_sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nT; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "spatialEffectsKnots" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nCov; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= est_ar; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= nKnots; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muZeros" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nLocs; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nT; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "spatialEffects" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nKnots; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "SigmaKnots" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nLocs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "SigmaOffDiag" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nLocs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invSigmaKnots" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_hat" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= gamma_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gammaA" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp_sigma_sq";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp_scale";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp_sigma";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= est_df; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "df" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= norm_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= gamma_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CV" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nb2_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nb2_phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_year_effects; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yearEffects" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= est_temporalRE; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "year_sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nT; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "spatialEffectsKnots" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nCov; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= est_ar; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ar" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= nKnots; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muZeros" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= nLocs; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nT; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "spatialEffects" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nKnots; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "SigmaKnots" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nLocs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "SigmaOffDiag" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= nKnots; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nLocs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "invSigmaKnots" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_hat" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= gamma_params; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gammaA" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gp_sigma_sq";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }

}; // model

} // namespace




#endif
